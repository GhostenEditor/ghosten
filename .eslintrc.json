{
  "root": true,
  "ignorePatterns": [
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/no-host-metadata-property": [
          "off"
        ],
        "@angular-eslint/no-inputs-metadata-property": [
          "off"
        ],
        // 数组[]两边不需要空格
        "array-bracket-spacing": [
          "error",
          "never"
        ],
        // 在属性之前禁止使用空格 arr. pop()
        "arrow-body-style": [
          "error",
          "as-needed"
        ],
        // 箭头函数=>前后加空格
        "arrow-spacing": [
          "error",
          {
            "before": true,
            "after": true
          }
        ],
        // 箭头函数 函数体不需要大括号的时候省略
        "block-spacing": "error",
        // 花括号左大括号在同一行，右大括号在新的一行、else跟上一个右大括号同一行
        "brace-style": [
          "error",
          "1tbs"
        ],
        // 变量名不能用下划线
        "camelcase": "error",
        // 逗号之后添加一个空格
        "comma-spacing": [
          "error",
          {
            "before": false,
            "after": true
          }
        ],
        //逗号在行末尾
        "comma-style": [
          "error",
          "last"
        ],
        // 分号之前不要空格。
        "computed-property-spacing": [
          "error",
          "never"
        ],
        //语句结尾需要分号
        "dot-notation": [
          "error"
        ],
        //禁止多个空行超过1行
        "eqeqeq": "error",
        // 不允许在行尾添加尾随空白
        "func-call-spacing": [
          "error",
          "never"
        ],
        // 禁止多个空格
        "indent": [
          "error",
          2,
          {
            "SwitchCase": 1,
            "ObjectExpression": 1,
            "VariableDeclarator": 2,
            "outerIIFEBody": 0,
            "ignoredNodes": [
              "CallExpression",
              "MemberExpression",
              "FunctionExpression",
              "FunctionDeclaration",
              "BlockStatement",
              "ChainExpression",
              "ArrowFunctionExpression",
              "ClassBody",
              "FunctionDeclaration",
              "FunctionExpression",
              "Identifier",
              "ObjectExpression",
              "ObjectPattern",
              "ConditionalExpression",
              "SwitchStatement"
            ]
            //            "ignoredNodes",: ["ChainExpression > AssignmentPattern > AssignmentExpression > CallExpression > FunctionExpression.callee > BlockStatement.body"]
          }
        ],
        // 不允许在对象文字中的键和冒号之间没有空格，值和冒号之间有一个空格
        "key-spacing": [
          "error",
          {
            "beforeColon": false
          }
        ],
        "keyword-spacing": [
          "error",
          {
            "overrides": {
              "if": {
                "after": true
              },
              "for": {
                "before": true,
                "after": true
              },
              "while": {
                "after": true
              }
            }
          }
        ],
        "max-len": [
          "error",
          400
        ],
        // 不允许使用console
        "no-alert": "error",
        // 不允许使用debugger
        "no-console": [
          "error",
          {
            "allow": [
              "warn",
              "error",
              "info"
            ]
          }
        ],
        // 不允许空的块
        "no-constant-condition": "error",
        "no-debugger": "error",
        // 不允许多余的空格
        "no-duplicate-case": "error",
        // 禁止不必要的布尔转换。icon.svg = !!!icon.svg
        "no-duplicate-imports": "error",
        // switch case 故意不要break时写明注释 // no break, 否则会报错给出提示
        "no-empty": "error",
        // { } block需要一个或多个空格
        "no-eq-null": "error",
        // 扩展运算符及其表达式之间不允许有空格。
        "no-extra-boolean-cast": "error",
        // 模板字符串中的表达式, 不允许大括号内的空格 `hello, ${ obj.icon.svg }!` ==>  `hello, ${obj.icon.svg}!`
        "no-extra-semi": "error",
        // 函数名称和调用它的左括号之间不能有空格。fun () ==> fun()
        "no-fallthrough": [
          "error",
          {
            "commentPattern": "no[\\s\\w]*break"
          }
        ],
        // 一元运算符之前或之后需要或不允许空格
        "no-multi-spaces": [
          "error",
          {
            "ignoreEOLComments": true
          }
        ],
        // 在圆括号内强制使用零空格
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 1
          }
        ],
        // 需要大括号内的空格（{}除外）
        "no-self-compare": "error",
        // 禁止使用var
        "no-sparse-arrays": "error",
        // 禁止冗余的return；没有任何内容的return;语句是多余的，
        "no-trailing-spaces": "error",
        // 不要将两个字符串连接在一起， '1'+'2'
        "no-unreachable": "error",
        //        "prefer-const": "error", // 如果一个变量从不重新分配，使用const声明更好
        //        "prefer-const": ["error", {"ignoreReadBeforeAssign": true}],
        // 中缀操作符周围要加空格
        "no-useless-concat": "error",
        // 在(前面不允许有空格 fun() {}
        "no-useless-return": "error",
        // 功能块 {} 前面需要有空格 fun() {}
        "no-var": "error",
        // 不允许计算属性括号内的空格 obj[ 'icon.svg' ]
        "no-whitespace-before-property": "error",
        // 不允许变量与自身比较 if (x === x) {}
        "object-curly-spacing": [
          "error",
          "always"
        ],
        // 要求typeof表达式仅与有效的字符串文字或其他typeof表达式进行比较
        "quote-props": [
          "error",
          "as-needed"
        ],
        // 条件判断中不允许使用常量表达式
        "rest-spread-spacing": [
          "error"
        ],
        // 不使用稀疏数组（如 let arr = [1, , 3]）
        "semi": [
          "error",
          "always"
        ],
        //对象的key不需要加引号, 如果key文本中有空格或其他特殊字符的话可以加引号
        "semi-spacing": [
          "error",
          {
            "before": false
          }
        ],
        // 不允许使用重复的case语句。
        "sort-imports": [
          "error",
          {
            "ignoreCase": false,
            "ignoreDeclarationSort": false,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": [
              "none",
              "all",
              "multiple",
              "single"
            ],
            "allowSeparatedGroups": true
          }
        ],
        // 合并import导入列表
        "space-before-blocks": "error",
        // 不允许使用 x == NaN ==> isNaN(x)
        "space-before-function-paren": [
          "error",
          {
            "anonymous": "always",
            // 匿名函数表达式需要空格 function() {}
            "named": "never",
            // 有名字的函数函数名与(之间不需要空格 function fun() {}
            "asyncArrow": "always"
            //async函数 async与(之间需要空格 async ()
          }
        ],
        // 使用===
        "space-in-parens": [
          "error",
          "never"
        ],
        // 首选.符号来访问对象的属性，含有空格等特殊字符的可以用中括号表示法来访问属性obj['lo l']
        "space-infix-ops": [
          "error",
          {
            "int32Hint": false
          }
        ],
        //        "no-unused-expressions": "error", //禁止无用的表达式
        //不能有无法执行的代码,例如break、return后面不能再有其他语句
        "space-unary-ops": "error",
        "template-curly-spacing": "error",
        // 禁止使用alert confirm prompt
        "use-isnan": "error",
        "valid-typeof": "error"
        //        "quotes": ["error", "backtick", { "avoidEscape": true }] // 使用单引号
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}
